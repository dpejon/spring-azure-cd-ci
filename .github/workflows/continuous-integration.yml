# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Continuous Integration with Github Actions

on:
  push:
    branches:
      - main

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    
    - name: Docker Login
      uses: docker/login-action@v3.2.0
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
          
    - name: Set up JDK 18
      uses: actions/setup-java@v3
      with:
        java-version: '18'
        distribution: 'adopt'
        cache: maven
        
    - name: Build Application JAR
      working-directory: rest-with-spring-boot-and-java-erudio
      run: mvn clean package -DskipTests

    - name: Build docker-compose
      working-directory: .
      run: docker compose build

    - name: Push to Dockerhub
      run: |
        docker tag ${{ secrets.IMAGE_NAME }}:latest ${{ secrets.DOCKER_USERNAME }}/rest-with-spring-boot-erudio:${{ github.run_id }}

        docker push ${{ secrets.IMAGE_NAME }}:${{ github.run_id }}
        docker push ${{ secrets.IMAGE_NAME }}:latest

    - name: Azure Container Registry Login
      uses: Azure/docker-login@v1
      with:
        username: ${{ secrets.AZ_DOCKER_USERNAME }}
        password: ${{ secrets.AZ_DOCKER_PASSWORD }}
        login-server: ${{ secrets.AZURE_CONTAINER_REGISTRY }}

    - name: Push Docker Images to Azure Container Registry
      run: |
        docker tag ${{ secrets.IMAGE_NAME }}:latest ${{ secrets.AZURE_CONTAINER_REGISTRY }}/rest-with-spring-boot-erudio:latest
        docker push ${{ secrets.AZURE_CONTAINER_REGISTRY }}/rest-with-spring-boot-erudio:latest

        docker tag ${{ secrets.IMAGE_NAME }}:latest ${{ secrets.AZURE_CONTAINER_REGISTRY }}/rest-with-spring-boot-erudio:${{ github.run_id }}
        docker push ${{ secrets.AZURE_CONTAINER_REGISTRY }}/rest-with-spring-boot-erudio:${{ github.run_id }}

    - name: Azure Login
      uses: Azure/login@v2.1.0
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}


    - name: Azure WebApp Container - App Deployment
      uses: Azure/webapps-deploy@v3.0.1
      with:
        # Name of the Azure Web App
        app-name: erudio-api-server
        images: ${{ secrets.AZURE_CONTAINER_REGISTRY }}/rest-with-spring-boot-erudio:${{ github.run_id }}
